<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx" 
     xmlns:context="http://www.springframework.org/schema/context"
     
     xmlns:util="http://www.springframework.org/schema/util"
      xmlns:jee="http://www.springframework.org/schema/jee"
      
     xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	 xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd        
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd    
       
        ">

<!--SpringMVC配置  -->     
       <!--开启的注解扫描，扫描的包-->  
     <context:component-scan base-package="com.joy.xwb"></context:component-scan>
      <!--开启springMVC的扫描驱动  -->
     <mvc:annotation-driven></mvc:annotation-driven>
     
     <!-- 配置视图解析器 -->
     <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
     	<property name="prefix" value="/WEB-INF/page/"></property> <!--/代表"WebRoot"下的，  "/WEB-INF"代表WEB-INF下的页面，为了安全我们的页面通常放在WEB-INF下-->
  		<property name="suffix" value=".jsp"></property>
     </bean>
     
 
     
    <!-- 加载数据库连接的properites配置文件，配置数据源的另一种方式 -->
     <!--加载数据库的连接配置		-->
	<util:properties id="jdbc" location="classpath:db.properties"></util:properties>
	<!-- 获取properites的值时#{id名.属性名} -->
	<!--配置数据源  数据库连接池 采用dbcp数据源   #注意：记得引入dbcp连接池所需要的jar包和驱动包ojdbc的jar包-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="#{jdbc.driverClass}"></property>
	   <property name="url" value="#{jdbc.url}"></property>   
	   <property name="username" value="#{jdbc.username}"></property>
	   <property name="password" value="#{jdbc.password}"></property>
	   <property name="maxActive" value="#{jdbc.maxActive}"></property>
	   <property name="maxWait" value="#{jdbc.maxWait}"></property>
	</bean>	

<!-- mybatis集成SpringMVC -->
	<!--1:配置  mybatis 的session 工厂名字固定sqlSessionFactory-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:com/joy/xwb/sql/*.xml"></property>
	</bean>
	<!-- 2:扫描指定包下面的所有接口，来 匹配和映射我们的sql数据 和接口  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.joy.xwb.dao"></property>
	</bean>




<!-- 配置登陆拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/user/toLogin.do"/>
			<mvc:exclude-mapping path="/user/toRegist.do"/>
			<mvc:exclude-mapping path="/user/checkName.do"/>
			<mvc:exclude-mapping path="/user/login.do"/>
			<mvc:exclude-mapping path="/util/getCode.do"/>
			<mvc:exclude-mapping path="/util/checkCode.do"/>
			<mvc:exclude-mapping path="/user/addUser.do"/>
			
			<bean class="com.joy.xwb.util.LoginIntercept"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<!--配置异常处理  -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">error/error</prop>
			</props>
		</property>	
	</bean>
	<!-- applicationContext.xml中配置的异常处理不能捕获web框架的异常，需要再去在web.xml中配置 -->


	

<!--配置事务  -->
	<!--事务管理器  -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="find*" read-only="true"/> <!-- 查询时只读 -->
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>	
		<!-- rollback-for 指定异常的方式     处理 非运行时 异常      -->
	</tx:advice>
	<!--aop配置顾问：通知，切入点  -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="within(com.joy.xwb.service.impl..*)"/>
	</aop:config>
	<!-- 这样就把service层实现包下的所有类中开头为add*,find*...的方法配置事务 -->



<!--配置AOP的切面做日志 -->
	<!-- 配置切面类bean -->
	<bean id="logsAdpect" class="com.joy.xwb.controller.LogsAspect"></bean>
	<!--aop  -->
	<aop:config >
		<aop:aspect ref="logsAdpect">
			<aop:before method="before" pointcut="execution(* com.joy.xwb.controller.CompositionController.*(..))"/>
		</aop:aspect>
	</aop:config>



</beans>